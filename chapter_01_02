*** 계층형 아키텍처란?
 웹 -> 도메인 -> 영속성
 웹계층에서 받은 요청을 도메인에서 비지니스 로직으로 처리하고 영속성 계층의 컴포넌트를 호출하여 조회하거나 변경함
 스프링에서의 계층형 아키텍처: 웹(컨트롤러) -> 도메인(서비스) -> 영속성(매퍼)

--- 계층형 아키텍처의 단점
1. 데이터베이스 주도 설계를 유도한다.
 계층형 아키텍처에서는 웹 계층은 도메인 계층에 의존하고 도메인 계층은 영속성 계층에 의존하면서 이 의존성의 방향에 따라 구현하게 됨
 영속성 계층인 데이터베이스를 먼저 설계하고 도메인 로직을 나중에 구현하게 됨 -> 도메인 로직을 나중에 구현하면서 비지니스 로직에 대한 이해가 정확한지 확인하기 어려워짐
 
2. 지름길을 선택하기 쉬워진다
 계층형 아키텍처의 규칙은 컴포넌트가 접근할때는 동일 계층 또는 하위 계층으로만 접근이 가능함.
 개발을 하다보면 특정 컴포넌트에 접근하기 위해 계층을 내려버리는 지름길을 택하기 쉬워짐
 컴포넌트를 아래 계층으로 내리면서 영속성 계층이 비대해짐

3. 테스트하기 어려워 진다
 단 하나의 엔티티 필드를 조작하더라도 한번 웹계층에 도메인 로직을 구현하게 되면 앞으로 진행되는 개발에서 더 많은 도메인 로직을 웹 계층에 구현하게 되면서 핵심 도메인 로직이 
 애플리케이션 전반으로 퍼지게 됨.
 웹 계층 테스트를 하려면 도메인 계층 뿐 아니라 영속성 계층도 mocking해야해서 테스트의 복잡도가 올라감

4. 유스케이스를 숨긴다
*** 유스케이스란?
 "시스템의 하나 이상의 액터 또는 이해관계자에게 관측 가능한 결과를 산출하는 시스템에 의해 수행되는 일련의 활동의 명세"
기능을 추가하거나 변경할 적절한 위치를 찾기 위해 아키텍처는 코드를 빠르게 탐색하는데에 도움이 되어야 함
계층형 아키텍처는 도메인 로직이 여러 계층에 걸쳐 흩어질 위험이 높기 때문에 이러한 코드 탐색이 어려워 진다

5. 동시 작업이 어려워 진다
 계층형 아키텍처에서는 작업이 영속성 계층에서 부터 시작하는 경우가 많기 때문에 영속성 계층 -> 도메인 계층 -> 웹 계층의 순서로 개발하면서 하나의 기능에는 한명의 개발자만 작업하게 됨

--- 의존성 역전하기
1. 단일 책임 원칙
*** 단일 책임 원칙 이란?
 Single Responsibility Principle - SRP는 객체는 단 하나의 책임만 가져야 한다는 원칙을 말한다.
여기서 '책임' 이라는 의미는 하나의 '기능 담당'으로 보면 된다.
즉, 하나의 클래스는 하나의 기능 담당하여 하나의 책임을 수행하는데 집중되어야 있어야 한다는 의미이다.

단일 책임 원칙의 실제 정의: 컴포넌트를 변경하는 이유는 오직 하나뿐이어야 한다.
아키텍처에서 이것이 의미하는 것: 컴포넌트를 변경할 이유가 한 가지라면 어떤 다른 이유로 소프트웨어를 변경하더라도
이 컴포넌트에 대해 신경 쓸 필요가 없어진다
컴포넌트의 의존성은 변경할 이유가 됨 -> 컴포넌트의 의존성을 줄이는게 좋다

2. 의존성 역전 원칙
 계층형 아키텍처에서 의존성은 항상 아래 방향을 가리킨다. 따라서 단일 책임 원칙에 의하면 상위 계층의 컴포넌트들이 하위 계층보다 변경할 이유가 더 많다
 계층형 아키텍처에서 데이터베이스 중심으로 설계한 경우 영속성 계층에 대한 도메인 계층의 의존성 때문에 영속성 계층을 변경할 때마다 잠재적으로 도메인 계층도 변경해야 함
 이런 경우를 피하기 위해 의존성을 제거하려면? -> 의존성 역전 원칙: "코드상의 어떤 의존성이든 그 방향을 바꿀 수(역전시킬 수) 있다"
 예시) 도메인 계층에 리포지토리 인터페이스를 만들고 이 구현체를 영속성 계층에 구현함으로써 순환 의존성을 만듦
 객체들이 서로 정보를 주고 받을 때 의존 관계가 형성됨. 상속 관계로 이루어진 모듈을 가져다 사용할 때 하위 모듈의 직접 인스턴스를 가져다 쓰지 마라 == "상위의 인터페이스 타입의 객체로 통신하라"

3. 클린 아키텍처
*** ORM (Object-Relational Mapping 객체 관계 매핑)
객체와 관계형 데이터베이스의 데이터를 자동으로 매핑(연결)해주는 것을 말한다.
객체 지향 프로그래밍은 클래스를 사용하고, 관계형 데이터베이스는 테이블을 사용한다.
객체 모델과 관계형 모델 간에 불일치가 존재한다.
ORM을 통해 객체 간의 관계를 바탕으로 SQL을 자동으로 생성하여 불일치를 해결한다.
데이터베이스 데이터 <—매핑—> Object 필드
객체를 통해 간접적으로 데이터베이스 데이터를 다룬다.
Persistant API라고도 할 수 있다.
Ex) JPA, Hibernate, mybatis 등
https://gmlwjd9405.github.io/2019/02/01/orm.html

4. 육각형 아키텍처(헥사고날 아키텍처)
육각형 안에는 도메인 엔티티와 이와 상호작용하는 유스케이스가 있고, 육각형에서 외부로 향하는 의존성이 없음
육각형 바깥에는 애플리케이션과 상호작용하는 다양한 어댑터가 있음.
육각형 왼쪽은 주도하는 어댑터(driving adapter), 오른쪽은 주도되는 어댑터(driven adapter)
주도하는 어댑터쪽에서는 포트가 코어에 있는 유스케이스 중 하나에 구현되고 어댑터에 의해 호출되는 인터페이스가 됨
주도되는 어댑터쪽에서는 그러한 포트가 어댑터에 의해 구현되고 코어에 의해 호출되는 인터페이스가 됨
코어와 각 어댑터는 특정 포트로 통신함 -> 포트와 어댑터 아키텍처라고도 한다
육각형 아키텍처를 계층형 아키텍처로 구성하는 경우
 - 가장 바깥쪽에 있는 계층은 애플리케이션과 다른 시스템간의 번역을 담당하는 어댑터로 구성
 - 포트와 유스케이스 구현체를 결합해서 애플리케이션 계층을 구현
 - 마지막 계층에는 도메인 엔티티가 위치함
